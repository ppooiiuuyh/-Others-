1. distdog 라이브러리 사용방법

1. 사용될 c코드상에 distdog 라이브러리를 include한다.
- #include "distdog.c"

2. 사용될 c코드상에서 distdog 초기화 함수를 실행시킨다.
- initDistDog(argc, argv);
- initSocker(argc,argv);

3. 사용될 c코드상에서 distdog 스레드 시작 함수를 실행시킨다.
- distDog_thr_id = distDog-startTread(NULL);

*인자 argc는 인자 배열 argv의 수,  argv는 <시작모드> ,  <네트워크 브로드캐스팅 주소> 의 두개의 char*타입 인자가들어있는 char**타입.




2. demo용 테스트파일 사용법
1. distdog 내의 test용 main.c 컴파일
- gcc -I. -o distDog main.c socket.c -pthread

2. test용 실행파일 실행
- ./distDog 1 182.168.0.255      
- ./distDog 0 182.168.0.255      

* 데모환경에서는 브로드캐스팅주소가 182.168.0.255 였습니다. 다른 환경에서라면 환경에맞는 브로드캐스팅 주소를 인자로 사용할 수 있습니다. 
* 인자 1은 주 장치로 동작함을 의미합니다, 인자 2는 보조 장치로 시작함을 의미합니다.
* 사용할 환경에서 브로드캐스팅 기능이 사용가능하여야합니다.
* 제대로 된 동작을 확인하기 위해서는 두개 이상의 장치를 사용해야합니다.
* 실제 사용하는 경우에는 시작프로그램에 목적 프로그램을 등록시켜두고 사용해야할것이며 데모 영상에선 그렇게 진행하였습니다.
하지만 시작프로그램에 등록하는 방식은 여러가지가 있으며 본 설명서에는 포함시키지 않습니다.


*첨부되는 소스파일로 부터 직접 컴파일 하여 사용바는 방법 외에 저희 데모용 장치의 세팅을 그대로 담은
img 파일을 sd카드에 구워서 사용해 볼 수도 있습니다.
*이경우 파일 경로는 /home/pi/Desktop/의 distdog 폴더입니다.

*파일을 다운받아 사용하는 경우 sudo chmod +x ~~를 통한 접근권한상승이 필요합니다.



-----------------------------
2. 하드웨어 리붓 사용 방법

1. 모듈을 빌드합니다.
sudo make clean (새로 컴파일하는 경우 반드시 필요합니다)
sudo make
* 커널컴파일 불가능한경우 이미 만들어져있는 모듈을 사용할 수 있습니다.
* 본 하드웨어 리붓 모듈은 라즈비안 2.9.46-v7버전 커널에서 빌드되었습니다.


2. GPIO를 세팅합니다.
signal in - 23번 핀
signal out - 24번 핀 입니다.
hwreboot - 18번 핀입니다.

signal in은 관측대상이 살아있는 지를 확인받기위해 주기적으로 신호를 받을 핀이며
signal out은 자신을 관측할 디바이스에게 신호를 주기위한 핀입니다.
hwreboot은 관측대상의 하드웨어 리붓 단자에 연결되어 실제로 대상이 죽었다고 판정될 전기신호를 주어 대상을 강제로 리붓시키는데 사용되는 출력핀입니다.


3. 모듈을 올립니다.
-insmod external_watchdog.ko 또는 sudo insmod external_watchdog.ko


*파일을 다운받아 사용하는경우 sudo chmod +x ~~ 를 통한 접근권한 상승이 필요합니다.
